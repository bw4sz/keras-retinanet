#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.err-values = {loc('keras_retinanet/preprocessing/onthefly.py'): {}}
debug.recent-run-args = {loc('keras_retinanet/bin/train.py'): [u'--no-weights onthefly "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv" ',
        u'onthefly "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv" --no-weights',
        u'onthefly "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv" --snapshot None',
        u'onthefly "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv"',
        u'csv "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv"',
        u'-dataset_type onthefly "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv"',
        u'--dataset_type onthefly "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv"',
        u'--dataset_type csv "/Users/ben/Documents/DeepForest/data/detection_OSBS_006.csv"',
        u'--dataset_type csv',
        u'csv /Users/ben/Documents/keras-retinanet/examples/test.csv /Users/ben/Documents/keras-retinanet/examples/test_classes.csv\n',
        u'csv /Users/ben/Documents/keras-retinanet/examples/test.csv /Users/ben/Documents/keras-retinanet/examples/test_classes.csv --group_method random\n',
        u'csv /Users/ben/Documents/keras-retinanet/examples/test.csv /Users/ben/Documents/keras-retinanet/examples/test_classes.csv']}
edit.bookmarks = {'show': (loc('keras_retinanet/preprocessing/onthefly.py'),
                           {'attrib-starts': [('CSVGenerator',
        90),
        ('CSVGenerator.show',
         145)],
                            'first-line': 123L,
                            'sel-line': 149L})}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'bpZQzW8ebbbzsc7bKeMVVsVoTb'\
        'xpUqNE',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.07527443805541034,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.30000000000000004,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'grid',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'res',
                                       'fReverse': False,
                                       'fSearchText': u'read_',
                                       'fStartPos': 0,
                                       'fStyle': 'regex',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': True,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 4585L,
                       'folded-linenos': [],
                       'history': {u'file:/Users/ben/Documents/DeepForest/DeepForest/Lidar.py': ['o'\
        'cd\n',
        'pcd\n',
        'features\n',
        'row\n',
        'row.xmin\n',
        'normal_xyz=normalize(tree)\n',
        '#convert to open3d format\npcd = open3d.PointCloud()\npcd.points = '\
        'open3d.Vector3dVector(normal_xyz)\n\n#subsample on fine grid\ndownp'\
        'cd = open3d.voxel_down_sample(pcd, voxel_size = 0.05)\n\n#Minimum d'\
        'istances among points\ndat=np.asarray(downpcd.points)\nd=min_distan'\
        'ce(dat)\n\n',
        'd\n',
        'if(d.shape[0]>num_points):\n    rows=np.random.choice(d.shape[0],si'\
        'ze=num_points,replace=False)\nelse:\n    rows=np.random.choice(d.sh'\
        'ape[0],size=num_points,replace=False)\n\n',
        'rows.shape\n',
        'd.shape\n',
        'downpcd\n',
        'tree.shape\n',
        'trees\n',
        '[x.shape for x in trees]\n',
        'd.shape[0]\n'],
                                   u'file:/Users/ben/Documents/keras-retinanet/keras_retinanet/bin/train.py': ['v'\
        'alidation_generaton\n',
        'a=None\n',
        'a\n'],
                                   u'file:/Users/ben/Documents/keras-retinanet/keras_retinanet/preprocessing/csvtest.py': ['s'\
        'elf.image_data\n',
        'len(self.image_data)\n',
        'self.image_data[2]\n',
        'self.image_data[/data/imgs/img_002.jpg]\n',
        'self.image_data["/data/imgs/img_002.jpg"]\n'],
                                   u'file:/Users/ben/Documents/keras-retinanet/keras_retinanet/preprocessing/onthefly.py': ['a'\
        'nnotations[1]\n',
        'annotations[0]\n',
        'self.image_data[4]\n',
        'self.image\n',
        'np.asrray(image)\n',
        'image.shape\n',
        'from matplotlib import pyplot\n',
        'np.asarray(image)\n',
        'out_image=out_image/1000\n',
        'pyplot.imshow(np.asarray(image))\npyplot.show()\n\n',
        "with rasterio.open(self.rgb_tile_dir + row[0]['rgb_path']) as src:"\
        "\n    out_image, out_transform = mask(src, [features], crop=True)\n"\
        "    \n#color channel should be last, tensorflow convention?\nout_im"\
        "age=np.moveaxis(out_image, 0, -1)     \n\n#scale to 0-255\nout_imag"\
        "e=out_image/1000\n\n",
        'pyplot.imshow(np.asarray(image))\n',
        'image.shape()\n',
        'imag\n',
        "path   = self.image_names[image_index]\nannots = self.image_data[pa"\
        "th]\nboxes  = np.zeros((len(annots), 5))\nfor idx, annot in enumera"\
        "te(annots):\n    class_name = annot['label']\n    boxes[idx, 0] = f"\
        "loat(annot['xmin'])\n    boxes[idx, 1] = float(annot['ymin'])\n    "\
        "boxes[idx, 2] = float(annot['xmax'])\n    boxes[idx, 3] = float(ann"\
        "ot['ymax'])\n    boxes[idx, 4] = self.name_to_label(class_name)\n\n",
        'boxes\n',
        'len(boxes)\n',
        'box=boxes[1]\n',
        'self.image_data[image_index]\n',
        'rows[1]\n',
        'box=rows[1]\n',
        "box['cluster_xmin'] - box['xmin']\n",
        "box['xmin']-box['cluster_xmin']\n",
        'self.data\n',
        "box['origin_xmin']=box['xmin']-box['cluster_xmin']\n",
        "box['origin_xmin']=box['xmin']-box['cluster_xmin']\nbox['origin_xma"\
        "x']=box['xmax']-box['cluster_xmax']\nbox['origin_ymin']=box['ymin']"\
        "-box['cluster_ymin']\nbox['origin_ymax']=box['ymax']-box['cluster_y"\
        "max']\n\n",
        'bnox\n',
        "box['cluster_ymax']\n",
        "bottom_left=(box['origin_xmin'],box['origin_ymin'])\n",
        "fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\n\nrows=s"\
        "elf.image_data[image_index]\nfor box in boxes:\n    box['origin_xmi"\
        "n']=box['xmin']-box['cluster_xmin']\n    box['origin_xmax']=box['cl"\
        "uster_xmax']-box['xmax']\n    box['origin_ymin']=box['ymin']-box['c"\
        "luster_ymin']\n    box['origin_ymax']=box['cluster_ymax']-box['ymax"\
        "']\n    \n    bottom_left=(box['origin_xmin'],box['origin_ymin'])\n"\
        "    height=box['origin_ymax']-box['origin_ymin']\n    width=box['or"\
        "igin_xmax']-box['origin_xmin']\n    rect = patches.Rectangle(bottom"\
        "_left,height,width,linewidth=1,edgecolor='r',facecolor='none')\n   "\
        " a.add_path(rect)\n\n",
        'ehigh\n',
        "box['origin_xmin']=box['xmin']-box['cluster_xmin']\nbox['origin_xma"\
        "x']=box['cluster_xmax']-box['xmax']\nbox['origin_ymin']=box['ymin']"\
        "-box['cluster_ymin']\nbox['origin_ymax']=box['cluster_ymax']-box['y"\
        "max']\n\nbottom_left=(box['origin_xmin'],box['origin_ymin'])\nheigh"\
        "t=box['origin_ymax']-box['origin_ymin']\nwidth=box['origin_xmax']-b"\
        "ox['origin_xmin']\nrect = patches.Rectangle(bottom_left,height,widt"\
        "h,linewidth=1,edgecolor='r',facecolor='none')\n\n",
        "height=box['origin_ymax']-box['origin_ymin']\n",
        "box['origin_xmin']=box['xmin']-box['cluster_xmin']\nbox['origin_xma"\
        "x']=box['cluster_xmax']-box['xmax']\nbox['origin_ymin']=box['ymin']"\
        "-box['cluster_ymin']\nbox['origin_ymax']=box['cluster_ymax']-box['y"\
        "max']\n\n",
        "bottom_left=(box['origin_xmin'],box['origin_ymin'])\nheight=box['or"\
        "igin_ymax']-box['origin_ymin']\nwidth=box['origin_xmax']-box['origi"\
        "n_xmin']\n\n",
        "box['cluster_ymin']\n",
        "box['xmin']\n",
        "box['ymin']\n",
        "box['ymax']\n",
        "bottom_left=(box['origin_xmin'],box['origin_ymax'])\n",
        'import matplotlib.patches as patches\n',
        "fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\n\nrows=s"\
        "elf.image_data[image_index]\nfor box in rows:\n    box['origin_xmin"\
        "']=box['xmin']-box['cluster_xmin']\n    box['origin_xmax']=box['clu"\
        "ster_xmax']-box['xmax']\n    box['origin_ymin']=box['ymin']-box['cl"\
        "uster_ymin']\n    box['origin_ymax']=box['cluster_ymax']-box['ymax'"\
        "]\n    \n    bottom_left=(box['origin_xmin'],box['origin_ymax'])\n"\
        "    height=box['origin_ymax']-box['origin_ymin']\n    width=box['or"\
        "igin_xmax']-box['origin_xmin']\n    rect = patches.Rectangle(bottom"\
        "_left,height,width,linewidth=1,edgecolor='r',facecolor='none')\n   "\
        " a.add_path(rect)\n\n",
        "fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\n\nrows=s"\
        "elf.image_data[image_index]\nfor box in rows:\n    box['origin_xmin"\
        "']=box['xmin']-box['cluster_xmin']\n    box['origin_xmax']=box['clu"\
        "ster_xmax']-box['xmax']\n    box['origin_ymin']=box['ymin']-box['cl"\
        "uster_ymin']\n    box['origin_ymax']=box['cluster_ymax']-box['ymax'"\
        "]\n    \n    bottom_left=(box['origin_xmin'],box['origin_ymax'])\n"\
        "    height=box['origin_ymax']-box['origin_ymin']\n    width=box['or"\
        "igin_xmax']-box['origin_xmin']\n    rect = patches.Rectangle(bottom"\
        "_left,height,width,linewidth=1,edgecolor='r',facecolor='none')\n   "\
        " ax.add_patch(rect)\n\n",
        'box["origin_ymax"]\n',
        'box["origin_ymin"]\n',
        "fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\nrows=sel"\
        "f.image_data[image_index]\nfor box in rows:            \n    bottom"\
        "_left=(box['origin_xmin'],box['origin_ymin'])\n    height=box['orig"\
        "in_ymax']-box['origin_ymin']\n    width=box['origin_xmax']-box['ori"\
        "gin_xmin']\n    rect = patches.Rectangle(bottom_left,height,width,l"\
        "inewidth=1,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)"\
        "\n\n",
        "box['origin_ymax']\n",
        "box['origin_ymin']\n",
        "box['ymax'] - box['ymin']\n",
        "box['origin_ymax'] - box['origin_ymin']\n",
        "box['cluster_ymax']-box['ymax']\n",
        "box['origin_xmin']=box['xmin']-box['cluster_xmin']\nbox['origin_xma"\
        "x']=box['cluster_xmax']-box['xmax']\nbox['origin_ymin']=box['ymax']"\
        "-box['cluster_ymax']\nbox['origin_ymax']=(box['cluster_ymax']-box['"\
        "cluster_ymin'])-box['ymin']\n\n",
        'data.xmin\n',
        'data.xmin-data.cluster_xmin\n',
        "data['origin_xmax']=data['cluster_xmax']-data['xmax']\n",
        "data['origin_xmin']=data['xmin']-data['cluster_xmin']\ndata['origin"\
        "_xmax']=data['cluster_xmax']-data['xmax']\ndata['origin_ymin']=data"\
        "['ymax']-data['cluster_ymax']\ndata['origin_ymax']=(data['cluster_y"\
        "max']-data['cluster_ymin'])-data['ymin']\n\n",
        "data['origin_ymax']=(data['cluster_ymax']-data['cluster_ymin'])-dat"\
        "a['ymin']\n",
        " data['origin_ymax'].range\n",
        " data['origin_ymax'].range()\n",
        " data['origin_ymax']\n",
        "(data['cluster_ymax']-data['cluster_ymin'])\n",
        'widrth\n',
        'box\n',
        'pyplot.show()\n',
        '3284441-3284427\n',
        "with rasterio.open(self.rgb_tile_dir + row[0]['rgb_path']) as src:"\
        "\n    out_image, out_transform = mask(src, [features], crop=True)\n"\
        "\n",
        'out_iamge\n',
        'out_image\n',
        'out_image.res\n',
        "src=rasterio.open(self.rgb_tile_dir + row[0]['rgb_path']) \n",
        'src\n',
        'src.res\n',
        'self.rgb_res=0.1\n',
        'rows\n',
        'rows[0]\n',
        'box=rows[0]\n',
        "bottom_left=(box['origin_xmin'],box['origin_ymin'])/self.rgb_res\n",
        "(box['origin_xmin'],box['origin_ymin'])\n",
        "(box['origin_xmin']/self.rgb_res,box['origin_ymin']/self.rgb_res)\n",
        'self.image_data\n',
        'len(self.image_data)\n',
        'data\n',
        'rows=self.image_data[image_index]\n',
        'image\n',
        'fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\nrows=sel'\
        'f.image_data[image_index]\n\n',
        "for box in rows:            \n    bottom_left=(box['origin_xmin'],b"\
        "ox['origin_ymin'])\n    height=box['origin_ymax']-box['origin_ymin'"\
        "]\n    width=box['origin_xmax']-box['origin_xmin']\n    rect = patc"\
        "hes.Rectangle(bottom_left,height,width,linewidth=1,edgecolor='r',fa"\
        "cecolor='none')\n    ax.add_patch(rect)\npyplot.show()\n\n",
        'bottom_left\n',
        'height\n',
        'width\n',
        "box['origin_xmin']\n",
        "box['origin_xmax']\n",
        "fig,ax = pyplot.subplots(1)\n  ax.imshow(np.asarray(image))\n  rows"\
        "=self.image_data[image_index]\n  for box in rows:            \n    "\
        "  bottom_left=(box['origin_xmin'],box['origin_ymin'])\n      height"\
        "=box['origin_ymax']-box['origin_ymin']\n      width=box['origin_xma"\
        "x']-box['origin_xmin']\n      rect = patches.Rectangle(bottom_left,"\
        "height,width,linewidth=1,edgecolor='r',facecolor='none')\n      ax."\
        "add_patch(rect)\n  pyplot.show()\n\n",
        'image_iondex\n',
        'image_index\n',
        'row\n',
        'image_index=2\n',
        "row=self.image_data[image_index]\n\n#Crop cluster, all cluster coor"\
        "dinates the same within a image group\n\n#generate polygon\n#create"\
        " polygon from bounding box from the first row.\nfeatures=data2geojs"\
        "on(row[0])\n\n#crop and return image, all rgb_paths are the same\n"\
        "with rasterio.open(self.rgb_tile_dir + row[0]['rgb_path']) as src:"\
        "\n    out_image, out_transform = mask(src, [features], crop=True)\n"\
        "    \n#color channel should be last, tensorflow convention?\nout_im"\
        "age=np.moveaxis(out_image, 0, -1)     \n\n#scale to 0-255\nout_imag"\
        "e=out_image/255\n\n",
        'image=out_image\n',
        "fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\nrows=sel"\
        "f.image_data[image_index]\nfor box in rows:            \n    bottom"\
        "_left=(box['origin_xmin'],box['origin_ymin'])\n    height=box['orig"\
        "in_ymax']-box['origin_ymin']\n    width=box['origin_xmax']-box['ori"\
        "gin_xmin']\n    rect = patches.Rectangle(bottom_left,height,width,l"\
        "inewidth=1,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)"\
        "\npyplot.show()\n\n",
        "fig,ax = pyplot.subplots(1)\nax.imshow(np.asarray(image))\nrows=sel"\
        "f.image_data[image_index]\nfor box in rows:            \n    bottom"\
        "_left=(box['origin_xmin'],box['origin_ymin'])\n    width=box['origi"\
        "n_ymax']-box['origin_ymin']\n    height=box['origin_xmax']-box['ori"\
        "gin_xmin']\n    rect = patches.Rectangle(bottom_left,height,width,l"\
        "inewidth=1,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)"\
        "\npyplot.show()\n\n"]},
                       'launch-id': None,
                       'sel-line': 4589L,
                       'sel-line-start': 641699L,
                       'selection_end': 641716L,
                       'selection_start': 641716L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 2L,
                       'folded-linenos': [],
                       'history': {None: ['import pandas as pd\n',
        'pd.read_csv\n',
        'bounding_box_path="../data/detection_OSBS_003.csv"\n',
        'bbox=pd.read_csv(bounding_box_path)\n',
        'import h5py as h5\nimport numpy as np\nimport pyfor\nimport open3d'\
        '\nfrom scipy.stats import gaussian_kde\nfrom scipy.spatial import d'\
        'istance\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n',
        '# read bounding box\nbbox=pd.read_csv(bounding_box_path)\n\n# Read '\
        'Lidar tile\ncloud=loadLidar(lidar_path)\n    \n#filter out bare ear'\
        'th\ncloud.filter(min = 3, max = 200, dim = "z")\n\n#Create numpy ar'\
        'ray\nxyz=cloud.las.points.iloc[:,0:3].values\n\n# normalize\nnormal'\
        '_xyz=normalize(xyz)\n\n#convert to open3d format\npcd = open3d.Poin'\
        'tCloud()\npcd.points = open3d.Vector3dVector(normal_xyz)\n\n',
        'bbox\n',
        "bbox['label']\n",
        "bbox['label'].values\n",
        'bbox.head\n',
        'self.image_data\n',
        'import rasterio\n']},
                       'launch-id': None,
                       'sel-line': 15L,
                       'sel-line-start': 848L,
                       'selection_end': 848L,
                       'selection_start': 848L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('keras_retinanet/models/resnet.py'),
        {'attrib-starts': [('ResNetBackbone',
                            23),
                           ('ResNetBackbone.download_imagenet',
                            36)],
         'first-line': 0L,
         'folded-linenos': [],
         'sel-line': 52L,
         'sel-line-start': 1847L,
         'selection_end': 1847L,
         'selection_start': 1847L,
         'zoom': 0L},
        1529691836.558967],
        [loc('keras_retinanet/bin/train.py'),
         {'attrib-starts': [('parse_args',
                             289)],
          'first-line': 309L,
          'folded-linenos': [],
          'sel-line': 317L,
          'sel-line-start': 12051L,
          'selection_end': 12100L,
          'selection_start': 12100L,
          'zoom': 0L},
         1529692030.872735],
        [loc('keras_retinanet/backend/tensorflow_backend.py'),
         {'attrib-starts': [('pad',
                             25)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 882L,
          'selection_end': 882L,
          'selection_start': 882L,
          'zoom': 0L},
         1529692038.322733],
        [loc('keras_retinanet/layers/filter_detections.py'),
         {'attrib-starts': [('FilterDetections',
                             96),
                            ('FilterDetections.call',
                             125),
                            ('FilterDetections.call._filter_detections',
                             136)],
          'first-line': 114L,
          'folded-linenos': [],
          'sel-line': 148L,
          'sel-line-start': 6429L,
          'selection_end': 6429L,
          'selection_start': 6429L,
          'zoom': 0L},
         1529692040.331959],
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py'),
         {'attrib-starts': [('map_fn',
                             208),
                            ('map_fn.compute',
                             363)],
          'first-line': 342L,
          'folded-linenos': [],
          'sel-line': 378L,
          'sel-line-start': 14570L,
          'selection_end': 14570L,
          'selection_start': 14570L,
          'zoom': 0L},
         1529692041.91059],
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras/engine/base_layer.py'),
         {'attrib-starts': [('Layer',
                             20),
                            ('Layer.__call__',
                             381)],
          'first-line': 391L,
          'folded-linenos': [],
          'sel-line': 438L,
          'sel-line-start': 17488L,
          'selection_end': 17547L,
          'selection_start': 17547L,
          'zoom': 0L},
         1529692058.422362],
        [loc('keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             97),
                            ('OnTheFlyGenerator.size',
                             158)],
          'first-line': 128L,
          'folded-linenos': [],
          'sel-line': 161L,
          'sel-line-start': 5236L,
          'selection_end': 5272L,
          'selection_start': 5272L,
          'zoom': 0L},
         1529692864.989133],
        [loc('keras_retinanet/bin/train.py'),
         {'attrib-starts': [('create_models',
                             84)],
          'first-line': 107L,
          'folded-linenos': [],
          'sel-line': 112L,
          'sel-line-start': 4324L,
          'selection_end': 4324L,
          'selection_start': 4324L,
          'zoom': 0L},
         1529692872.588059],
        [loc('keras_retinanet/models/retinanet.py'),
         {'attrib-starts': [('retinanet_bbox',
                             301)],
          'first-line': 312L,
          'folded-linenos': [],
          'sel-line': 348L,
          'sel-line-start': 13231L,
          'selection_end': 13231L,
          'selection_start': 13231L,
          'zoom': 0L},
         1529692875.413794],
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras/engine/base_layer.py'),
         {'attrib-starts': [('Layer',
                             20),
                            ('Layer.__call__',
                             381)],
          'first-line': 423L,
          'folded-linenos': [],
          'sel-line': 459L,
          'sel-line-start': 18471L,
          'selection_end': 18471L,
          'selection_start': 18471L,
          'zoom': 0L},
         1529692876.847697],
        [loc('keras_retinanet/layers/filter_detections.py'),
         {'attrib-starts': [('FilterDetections',
                             96),
                            ('FilterDetections.call',
                             125)],
          'first-line': 120L,
          'folded-linenos': [],
          'sel-line': 156L,
          'sel-line-start': 6761L,
          'selection_end': 6761L,
          'selection_start': 6761L,
          'zoom': 0L},
         1529692879.094109],
        [loc('keras_retinanet/backend/tensorflow_backend.py'),
         {'attrib-starts': [('map_fn',
                             19)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 720L,
          'selection_end': 720L,
          'selection_start': 720L,
          'zoom': 0L},
         1529692884.797632],
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py'),
         {'attrib-starts': [('map_fn',
                             208)],
          'first-line': 364L,
          'folded-linenos': [],
          'sel-line': 388L,
          'sel-line-start': 15011L,
          'selection_end': 15011L,
          'selection_start': 15011L,
          'zoom': 0L},
         1529692887.560342],
        [loc('keras_retinanet/layers/filter_detections.py'),
         {'attrib-starts': [('filter_detections',
                             20)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 80L,
          'sel-line-start': 3768L,
          'selection_end': 3768L,
          'selection_start': 3768L,
          'zoom': 0L},
         1529692915.645785],
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py'),
         {'attrib-starts': [('map_fn',
                             208)],
          'first-line': 364L,
          'folded-linenos': [],
          'sel-line': 388L,
          'sel-line-start': 15011L,
          'selection_end': 15011L,
          'selection_start': 15011L,
          'zoom': 0L},
         1529692916.760227],
        [loc('keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             97),
                            ('OnTheFlyGenerator.size',
                             158)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 161L,
          'sel-line-start': 5236L,
          'selection_end': 5272L,
          'selection_start': 5272L,
          'zoom': 0L},
         1529692920.568938],
        [loc('keras_retinanet/bin/train.py'),
         {'attrib-starts': [],
          'first-line': 8L,
          'folded-linenos': [],
          'sel-line': 42L,
          'sel-line-start': 1352L,
          'selection_end': 1352L,
          'selection_start': 1352L,
          'zoom': 0L},
         1529693003.341028],
        [loc('keras_retinanet/backend/tensorflow_backend.py'),
         {'attrib-starts': [('map_fn',
                             19)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 720L,
          'selection_end': 765L,
          'selection_start': 765L,
          'zoom': 0L},
         1529693324.450233],
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/inspect.py'),
         {'attrib-starts': [('getargspec',
                             1050)],
          'first-line': 1034L,
          'folded-linenos': [],
          'sel-line': 1063L,
          'sel-line-start': 41801L,
          'selection_end': 41801L,
          'selection_start': 41801L,
          'zoom': 0L},
         1529693330.697425],
        [loc('keras_retinanet/bin/train.py'),
         {'attrib-starts': [],
          'first-line': 8L,
          'folded-linenos': [],
          'sel-line': 42L,
          'sel-line-start': 1352L,
          'selection_end': 1352L,
          'selection_start': 1352L,
          'zoom': 0L},
         1529693333.104304]],
        20),
        'current-loc': loc('keras_retinanet/preprocessing/onthefly.py'),
        'editor-state-list': [(loc('../../miniconda3/envs/retinanet/lib/python3.6/inspect.py'),
                               {'attrib-starts': [('getargspec',
        1050)],
                                'first-line': 1034L,
                                'folded-linenos': [],
                                'sel-line': 1063L,
                                'sel-line-start': 41801L,
                                'selection_end': 41801L,
                                'selection_start': 41801L,
                                'zoom': 0L}),
                              (loc('keras_retinanet/preprocessing/onthefly.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 21L,
                                'sel-line-start': 547L,
                                'selection_end': 547L,
                                'selection_start': 547L,
                                'zoom': 0L}),
                              (loc('keras_retinanet/bin/train.py'),
                               {'attrib-starts': [],
                                'first-line': 8L,
                                'folded-linenos': [],
                                'sel-line': 42L,
                                'sel-line-start': 1352L,
                                'selection_end': 1352L,
                                'selection_start': 1352L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('../../miniconda3/envs/retinanet/lib/python3.6/inspect.py'),
         loc('keras_retinanet/preprocessing/onthefly.py'),
         loc('keras_retinanet/bin/train.py')]),
                               'open_files': [u'keras_retinanet/bin/train.py',
        u'keras_retinanet/preprocessing/onthefly.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5830174374526156},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1440,
                         0,
                         1920,
                         1080)}]}
guimgr.recent-documents = [loc('keras_retinanet/preprocessing/onthefly.py'),
                           loc('keras_retinanet/bin/train.py'),
                           loc('../../miniconda3/envs/retinanet/lib/python3.6/inspect.py')]
guimgr.visual-state = {loc('../DeepForest/DeepForest/CropGenerator.py'): {'a'\
        'ttrib-starts': [('crop_rgb',
                          88)],
        'first-line': 80L,
        'folded-linenos': [],
        'sel-line': 105L,
        'sel-line-start': 3095L,
        'selection_end': 3131L,
        'selection_start': 3131L,
        'zoom': 0L},
                       loc('../DeepForest/_config.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 169L,
        'selection_end': 185L,
        'selection_start': 185L,
        'zoom': 0L},
                       loc('../DeepForest/_config_debug.yml'): {'attrib-star'\
        'ts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 180L,
        'selection_end': 191L,
        'selection_start': 191L,
        'zoom': 0L},
                       loc('keras_retinanet/bin/train.py'): {'attrib-starts': [('m'\
        'ain',
        411)],
        'first-line': 319L,
        'folded-linenos': [],
        'sel-line': 441L,
        'sel-line-start': 18005L,
        'selection_end': 18005L,
        'selection_start': 18005L,
        'zoom': 0L},
                       loc('keras_retinanet/preprocessing/csv_generator.py'): {'a'\
        'ttrib-starts': [('CSVGenerator',
                          112),
                         ('CSVGenerator.name_to_label',
                          171)],
        'first-line': 160L,
        'folded-linenos': [],
        'sel-line': 175L,
        'sel-line-start': 5910L,
        'selection_end': 5910L,
        'selection_start': 5910L,
        'zoom': 0L},
                       loc('keras_retinanet/preprocessing/csvtest.py'): {'at'\
        'trib-starts': [('_read_annotations',
                         62)],
        'first-line': 60L,
        'folded-linenos': [],
        'sel-line': 96L,
        'sel-line-start': 3364L,
        'selection_end': 3459L,
        'selection_start': 3364L,
        'zoom': 0L},
                       loc('keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          34),
                         ('Generator.filter_annotations',
                          115)],
        'first-line': 129L,
        'folded-linenos': [],
        'sel-line': 134L,
        'sel-line-start': 5238L,
        'selection_end': 5272L,
        'selection_start': 5272L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('read_image_bgr',
                          25)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 841L,
        'selection_end': 841L,
        'selection_start': 841L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/retinanet/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'read_',
                         u'data[\\s]',
                         u'data[\\w+]',
                         u'data\\[\\w+]',
                         u'data\\[w+]',
                         u'data\\[\\\\"\\w+\\\\"]',
                         u'data\\[\\"\\w+\\"]',
                         u'data\\[\\"\\w+\\\\"]',
                         u'data\\[\\"\\w+\\]',
                         u'data\\["\\w+\\]',
                         u'data\\[\\w+\\]',
                         u'data[\\\\w+]',
                         u'warnings',
                         u'group_method',
                         u'group',
                         u'data2geojson',
                         u'read_image_bgr',
                         u'image_path(',
                         u'batch_size',
                         u'batch_szie']
testing.stored-results = (1,
                          [],
                          {})
